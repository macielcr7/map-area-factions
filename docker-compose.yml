version: '3.8'

services:
  postgres:
    image: postgis/postgis:15-3.3
    container_name: map-factions-postgres
    environment:
      POSTGRES_DB: map_factions
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - map-network

  redis:
    image: redis:7-alpine
    container_name: map-factions-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - map-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: map-factions-backend
    ports:
      - "8080:8080"
    environment:
      - ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=map_factions
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-super-secret-jwt-key
      - MAPBOX_TOKEN=pk.your-mapbox-token
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/bin
    networks:
      - map-network
    restart: unless-stopped

  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
    container_name: map-factions-admin
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NEXT_PUBLIC_WS_URL=ws://localhost:8080
      - NEXT_PUBLIC_MAPBOX_TOKEN=pk.your-mapbox-token
      - NEXTAUTH_SECRET=your-nextauth-secret
      - NEXTAUTH_URL=http://localhost:3000
    depends_on:
      - backend
    volumes:
      - ./admin:/app
      - /app/.next
      - /app/node_modules
    networks:
      - map-network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: map-factions-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infra/nginx/sites/:/etc/nginx/conf.d/
      - ./infra/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - admin
    networks:
      - map-network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: map-factions-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infra/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - map-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: map-factions-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infra/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - map-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  map-network:
    driver: bridge